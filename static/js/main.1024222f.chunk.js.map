{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","padding","spacing","paper","textAlign","color","palette","text","secondary","camera","display","props","showCamera","screen","showScreen","type","App","cameraRef","useRef","screenRef","useState","setShowCamera","setShowScreen","classes","setHasStarted","cameraAudioBitsPerSecond","cameraVideoBitsPerSecond","screenAudioBitsPerSecond","cameraRecorderRef","screenRecorderRef","cameraChunksRef","screenChunksRef","isRecording","setIsRecording","saveCameraMedia","blob","audioURL","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","saveScreenMedia","createCrmeraRecorder","stream","recorder","MediaRecorder","audioBitsPerSecond","videoBitsPerSecond","mimeType","current","ondataavailable","event","push","data","onstop","Blob","onerror","console","log","createScreenRecorder","useEffect","navigator","mediaDevices","enumerateDevices","then","devices","filter","d","kind","video","getUserMedia","a","srcObject","onloadedmetadata","_e","play","audio","mediaStream","getAudioTracks","audioTracks","addTrack","catch","stopRecord","stop","getDisplayMedia","cursor","className","Grid","container","item","xs","Paper","src","ref","width","autoPlay","style","margin","Button","onClick","variant","justifyContent","start","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qQAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,QAASH,EAAMI,QAAQ,IAEzBC,MAAO,CACLF,QAASH,EAAMI,QAAQ,GACvBE,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,OAAQ,CACNC,QAAS,SAACC,GAAD,OAAYA,EAAMC,WAAa,QAAU,SAEpDC,OAAQ,CACNH,QAAS,SAACC,GAAD,OAAYA,EAAMG,WAAa,QAAU,aAGhDC,EACE,aA6QOC,MA3Qf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAFZ,EAGuBE,oBAAS,GAHhC,mBAGNR,EAHM,KAGMS,EAHN,OAIuBD,oBAAS,GAJhC,mBAINN,EAJM,KAIMQ,EAJN,KAKPC,EAAU3B,EAAU,CAAEgB,aAAYE,eAL3B,EAMuBM,oBAAS,GANhC,mBAMMI,GANN,aAOmDJ,mBAAS,OAP5D,mBAONK,EAPM,aAQmDL,mBAAS,QAR5D,mBAQNM,EARM,aASmDN,mBAAS,QAT5D,mBASNO,EATM,KAUPC,GAVO,KAUaV,iBAAO,OAE3BW,GADkBX,iBAAO,MACLA,iBAAO,OAE3BY,GADkBZ,iBAAO,MACPA,iBAAO,KACzBa,EAAkBb,iBAAO,IAflB,EAgByBE,oBAAS,GAhBlC,mBAgBNY,EAhBM,KAgBOC,EAhBP,KAiBPC,EAAkB,SAACC,GACvB,IAAMC,EAAWC,IAAIC,gBAAgBH,GAC/BI,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAON,EACZG,EAAKI,SAAW,cAChBJ,EAAKK,QACLP,IAAIQ,gBAAgBN,EAAKG,OAErBI,EAAkB,SAACX,GACvB,IAAMC,EAAWC,IAAIC,gBAAgBH,GAC/BI,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAON,EACZG,EAAKI,SAAW,cAChBJ,EAAKK,QACLP,IAAIQ,gBAAgBN,EAAKG,OAwDrBK,EAAuB,SAACC,GAC5B,IAKMC,EAAW,IAAIC,cAAcF,EALnB,CACdG,mBAAoB1B,EACpB2B,mBAAoB1B,EACpB2B,SAAUtC,IAGZa,EAAkB0B,QAAUL,EAC5BA,EAASM,gBAAkB,SAACC,GACtB1B,EAAgBwB,SAClBxB,EAAgBwB,QAAQG,KAAKD,EAAME,OAGvCT,EAASU,OAAS,WAChB,IAAMxB,EAAO,IAAIyB,KAAK9B,EAAgBwB,QAAS,CAC7CvC,KAAMA,IAERmB,EAAgBC,IAElBc,EAASY,QAAUC,QAAQC,KAEvBC,EAAuB,SAAChB,GAC5B,IAKMC,EAAW,IAAIC,cAAcF,EALnB,CACdG,mBAAoB,MACpBC,mBAAoBzB,EACpB0B,SAAUtC,IAGZc,EAAkByB,QAAUL,EAC5BA,EAASM,gBAAkB,SAACC,GACtBzB,EAAgBuB,SAClBvB,EAAgBuB,QAAQG,KAAKD,EAAME,OAGvCT,EAASU,OAAS,WAChB,IAAMxB,EAAO,IAAIyB,KAAK7B,EAAgBuB,QAAS,CAC7CvC,KAAMA,IAER+B,EAAgBX,IAElBc,EAASY,QAAUC,QAAQC,KAE7BE,qBAAU,WACRC,UAAUC,aACPC,mBACAC,MAAK,SAACC,GAAD,OAAaA,EAAQC,QAAO,SAACC,GAAD,MAAkB,eAAXA,EAAEC,QAAuB,MACjEJ,MAAK,SAACK,GAAD,OAAWR,UAAUC,aAAaQ,aAAa,CAAED,aACtDL,KAJH,uCAIQ,WAAOrB,GAAP,eAAA4B,EAAA,6DACA3D,EAAUqC,UACZrC,EAAUqC,QAAQuB,UAAY7B,EAC9B/B,EAAUqC,QAAQwB,iBAAmB,SAACC,GAChC9D,EAAUqC,SACZrC,EAAUqC,QAAQ0B,SALpB,SASsBd,UAAUC,aACjCQ,aAAa,CAAEM,OAAO,EAAMP,OAAO,IACnCL,MAAK,SAACa,GAAD,OAAiBA,EAAYC,iBAAiB,MAXlD,cASEC,EATF,OAYJpC,EAAOqC,SAASD,GAChBrC,EAAqBC,GAbjB,kBAcG,MAdH,2CAJR,uDAoBGsC,MAAMxB,QAAQC,OAChB,IACH,IAAMwB,EAAU,uCAAG,sBAAAX,EAAA,sDACjBpD,GAAc,GACdS,GAAe,GACXL,EAAkB0B,SACpB1B,EAAkB0B,QAAQkC,OAExB3D,EAAkByB,SACpBzB,EAAkByB,QAAQkC,OAPX,2CAAH,qDA8BhB,OApBAvB,qBAAU,WACRC,UAAUC,aAAasB,gBAAgB,CACrCf,OAAO,EACPO,OAAO,EACPS,OAAQ,WAEPrB,KALH,uCAKQ,WAAOrB,GAAP,SAAA4B,EAAA,6DACAzD,EAAUmC,UACZnC,EAAUmC,QAAQuB,UAAY7B,EAC9B7B,EAAUmC,QAAQwB,iBAAmB,SAACC,GAChC5D,EAAUmC,SACZnC,EAAUmC,QAAQ0B,SAIxBhB,EAAqBhB,GATjB,kBAUG,MAVH,2CALR,uDAiBGsC,MAAMxB,QAAQC,OAChB,IAED,qBAAK4B,UAAWpE,EAAQxB,KAAxB,SACE,eAAC6F,EAAA,EAAD,CAAMC,WAAS,EAAC3F,QAAS,EAAzB,UACE,cAAC0F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CAAOL,UAAWpE,EAAQpB,MAA1B,UACE,uBAAO8F,IAAI,GAAGC,IAAKjF,EAAWkF,MAAM,OAAOR,UAAWpE,EAAQd,OAAQ2F,UAAQ,IAmB9E,qBAAKC,MAAO,CAAEC,OAAQ,IAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAS,kBAAMnF,GAAeT,IAC9B6F,QAAQ,YACRpG,MAAM,YAHR,SAKGO,EAAa,iCAAU,0CAKhC,cAACgF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CAAOL,UAAWpE,EAAQpB,MAA1B,UACE,uBAAO8F,IAAI,GAAGC,IAAK/E,EAAWgF,MAAM,OAAOR,UAAWpE,EAAQV,OAAQuF,UAAQ,IAU9E,qBAAKC,MAAO,CAAEC,OAAQ,IAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QAAS,kBAAMlF,GAAeR,IAC9B2F,QAAQ,YACRpG,MAAM,YAHR,SAKGS,EAAa,2BAAS,oCAM/B,cAAC8E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAOL,UAAWpE,EAAQpB,MAA1B,SACE,sBAAKkG,MAAO,CAAEC,OAAQ,GAAI5F,QAAS,OAAQgG,eAAgB,UAA3D,UACE,8BAAM1E,GAAe,uBACrB,qBAAKqE,MAAO,CAAEC,OAAQ,IAAtB,SACE,cAACC,EAAA,EAAD,CACEC,QApMI,WAClBhF,GAAc,GACdS,GAAe,GAXXL,EAAkB0B,SACpB1B,EAAkB0B,QAAQqD,MAAM,KAI9B9E,EAAkByB,SACpBzB,EAAkByB,QAAQqD,MAAM,MAwMpBF,QAAQ,YACRpG,MAAM,YAHR,4BAQF,qBAAKgG,MAAO,CAAEC,OAAQ,IAAtB,SACE,cAACC,EAAA,EAAD,CAAQC,QAASjB,EAAYkB,QAAQ,YAAYpG,MAAM,YAAvD,yCC5QDuG,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAEnB,IADL0C,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9E,SAAS+E,eAAe,SAM1BX,M","file":"static/js/main.1024222f.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport React, { useRef, useState, useEffect } from 'react';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  camera: {\n    display: (props) => (props.showCamera ? 'block' : 'none'),\n  },\n  screen: {\n    display: (props) => (props.showScreen ? 'block' : 'none'),\n  },\n}));\nconst type = {\n  webm: 'video/webm',\n};\nfunction App() {\n  const cameraRef = useRef(null);\n  const screenRef = useRef(null);\n  const [showCamera, setShowCamera] = useState(true);\n  const [showScreen, setShowScreen] = useState(true);\n  const classes = useStyles({ showCamera, showScreen });\n  const [hasStarted, setHasStarted] = useState(false);\n  const [cameraAudioBitsPerSecond, setCameraAudioBitsPerSecond] = useState(12800);\n  const [cameraVideoBitsPerSecond, setCameraVideoBitsPerSecond] = useState(254000 * 5);\n  const [screenAudioBitsPerSecond, setScreenAudioBitsPerSecond] = useState(254000 * 5);\n  const cameraRecorderRef = useRef(null);\n  const camereStreamRef = useRef(null);\n  const screenRecorderRef = useRef(null);\n  const screenStreamRef = useRef(null);\n  const cameraChunksRef = useRef([]);\n  const screenChunksRef = useRef([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const saveCameraMedia = (blob) => {\n    const audioURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = audioURL;\n    link.download = 'camera.webm';\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  const saveScreenMedia = (blob) => {\n    const audioURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = audioURL;\n    link.download = 'screen.webm';\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  const saveMedia = (cameraBlob, screenBlob) => {\n    if (cameraBlob) {\n      saveCameraMedia(cameraBlob);\n    }\n    if (screenBlob) {\n      saveScreenMedia(screenBlob);\n    }\n  };\n  const startCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.start(3000);\n    }\n  };\n  const startScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.start(3000);\n    }\n  };\n  const startRecord = () => {\n    setHasStarted(true);\n    setIsRecording(true);\n    startCameraRecord();\n    startScreenRecord();\n  };\n  const pauseCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.pause();\n    }\n  };\n  const pauseScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.pause();\n    }\n  };\n  const pauseRecord = () => {\n    setIsRecording(false);\n    pauseCameraRecord();\n    pauseScreenRecord();\n  };\n  const resumeCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.resume();\n    }\n  };\n  const resumeScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.resume();\n    }\n  };\n  const resumeRecord = () => {\n    setIsRecording(true);\n    resumeCameraRecord();\n    resumeScreenRecord();\n  };\n  const createCrmeraRecorder = (stream) => {\n    const options = {\n      audioBitsPerSecond: cameraAudioBitsPerSecond,\n      videoBitsPerSecond: cameraVideoBitsPerSecond,\n      mimeType: type.webm,\n    };\n    const recorder = new MediaRecorder(stream, options);\n    cameraRecorderRef.current = recorder;\n    recorder.ondataavailable = (event) => {\n      if (cameraChunksRef.current) {\n        cameraChunksRef.current.push(event.data);\n      }\n    };\n    recorder.onstop = () => {\n      const blob = new Blob(cameraChunksRef.current, {\n        type: type.webm,\n      });\n      saveCameraMedia(blob);\n    };\n    recorder.onerror = console.log;\n  };\n  const createScreenRecorder = (stream) => {\n    const options = {\n      audioBitsPerSecond: 12800,\n      videoBitsPerSecond: screenAudioBitsPerSecond,\n      mimeType: type.webm,\n    };\n    const recorder = new MediaRecorder(stream, options);\n    screenRecorderRef.current = recorder;\n    recorder.ondataavailable = (event) => {\n      if (screenChunksRef.current) {\n        screenChunksRef.current.push(event.data);\n      }\n    };\n    recorder.onstop = () => {\n      const blob = new Blob(screenChunksRef.current, {\n        type: type.webm,\n      });\n      saveScreenMedia(blob);\n    };\n    recorder.onerror = console.log;\n  };\n  useEffect(() => {\n    navigator.mediaDevices\n      .enumerateDevices()\n      .then((devices) => devices.filter((d) => d.kind === 'videoinput')[0])\n      .then((video) => navigator.mediaDevices.getUserMedia({ video }))\n      .then(async (stream) => {\n        if (cameraRef.current) {\n          cameraRef.current.srcObject = stream;\n          cameraRef.current.onloadedmetadata = (_e) => {\n            if (cameraRef.current) {\n              cameraRef.current.play();\n            }\n          };\n        }\n        const audioTracks = await navigator.mediaDevices\n          .getUserMedia({ audio: true, video: false })\n          .then((mediaStream) => mediaStream.getAudioTracks()[0]);\n        stream.addTrack(audioTracks);\n        createCrmeraRecorder(stream);\n        return null;\n      })\n      .catch(console.log);\n  }, []);\n  const stopRecord = async () => {\n    setHasStarted(false);\n    setIsRecording(false);\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.stop();\n    }\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.stop();\n    }\n  };\n  useEffect(() => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true,\n      cursor: 'always',\n    })\n      .then(async (stream) => {\n        if (screenRef.current) {\n          screenRef.current.srcObject = stream;\n          screenRef.current.onloadedmetadata = (_e) => {\n            if (screenRef.current) {\n              screenRef.current.play();\n            }\n          };\n        }\n        createScreenRecorder(stream);\n        return null;\n      })\n      .catch(console.log);\n  }, []);\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <video src=\"\" ref={cameraRef} width=\"100%\" className={classes.camera} autoPlay />\n            {/* <div style={{ margin: 16 }}>\n              audioBitsPerSecond\n              <Input\n                defaultValue={cameraAudioBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={cameraAudioBitsPerSecond}\n                onChange={(e) => setCameraAudioBitsPerSecond(e.target.value)}\n              />\n            </div>\n            <div style={{ margin: 16 }}>\n              videoBitsPerSecond\n              <Input\n                defaultValue={cameraVideoBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={cameraVideoBitsPerSecond}\n                onChange={(e) => setCameraVideoBitsPerSecond(e.target.value)}\n              />\n            </div> */}\n            <div style={{ margin: 16 }}>\n              <Button\n                onClick={() => setShowCamera(!showCamera)}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                {showCamera ? '隐藏摄像头' : '展示摄像头'}\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <video src=\"\" ref={screenRef} width=\"100%\" className={classes.screen} autoPlay />\n            {/* <div style={{ margin: 16 }}>\n              videoBitsPerSecond\n              <Input\n                defaultValue={screenAudioBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={screenAudioBitsPerSecond}\n                onChange={(e) => setScreenAudioBitsPerSecond(e.target.value)}\n              />\n            </div> */}\n            <div style={{ margin: 16 }}>\n              <Button\n                onClick={() => setShowScreen(!showScreen)}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                {showScreen ? '隐藏屏幕' : '展示屏幕'}\n              </Button>\n            </div>\n          </Paper>\n\n        </Grid>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <div style={{ margin: 16, display: 'flex', justifyContent: 'center' }}>\n              <div>{isRecording && '录制中'}</div>\n              <div style={{ margin: 16 }}>\n                <Button\n                  onClick={startRecord}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  开始\n                </Button>\n              </div>\n              <div style={{ margin: 16 }}>\n                <Button onClick={stopRecord} variant=\"contained\" color=\"secondary\">\n                  结束\n                </Button>\n              </div>\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}