[{"/Users/admin/demo/record-client/src/App.jsx":"1","/Users/admin/demo/record-client/src/index.js":"2","/Users/admin/demo/record-client/src/reportWebVitals.js":"3"},{"size":9277,"mtime":1606272174252,"results":"4","hashOfConfig":"5"},{"size":501,"mtime":1606207248071,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1606273169730,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"5zjmae",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/demo/record-client/src/App.jsx",["15","16","17","18"],"import { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport React, { useRef, useState, useEffect } from 'react';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  camera: {\n    display: (props) => (props.showCamera ? 'block' : 'none'),\n  },\n  screen: {\n    display: (props) => (props.showScreen ? 'block' : 'none'),\n  },\n}));\nconst type = {\n  webm: 'video/webm',\n};\nfunction App() {\n  const cameraRef = useRef(null);\n  const screenRef = useRef(null);\n  const [showCamera, setShowCamera] = useState(true);\n  const [showScreen, setShowScreen] = useState(true);\n  const classes = useStyles({ showCamera, showScreen });\n  const [hasStarted, setHasStarted] = useState(false);\n  const [cameraAudioBitsPerSecond, setCameraAudioBitsPerSecond] = useState(12800);\n  const [cameraVideoBitsPerSecond, setCameraVideoBitsPerSecond] = useState(254000 * 5);\n  const [screenAudioBitsPerSecond, setScreenAudioBitsPerSecond] = useState(254000 * 5);\n  const cameraRecorderRef = useRef(null);\n  const camereStreamRef = useRef(null);\n  const screenRecorderRef = useRef(null);\n  const screenStreamRef = useRef(null);\n  const cameraChunksRef = useRef([]);\n  const screenChunksRef = useRef([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const saveCameraMedia = (blob) => {\n    const audioURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = audioURL;\n    link.download = 'camera.webm';\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  const saveScreenMedia = (blob) => {\n    const audioURL = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = audioURL;\n    link.download = 'screen.webm';\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  const saveMedia = (cameraBlob, screenBlob) => {\n    if (cameraBlob) {\n      saveCameraMedia(cameraBlob);\n    }\n    if (screenBlob) {\n      saveScreenMedia(screenBlob);\n    }\n  };\n  const startCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.start(3000);\n    }\n  };\n  const startScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.start(3000);\n    }\n  };\n  const startRecord = () => {\n    setHasStarted(true);\n    setIsRecording(true);\n    startCameraRecord();\n    startScreenRecord();\n  };\n  const pauseCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.pause();\n    }\n  };\n  const pauseScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.pause();\n    }\n  };\n  const pauseRecord = () => {\n    setIsRecording(false);\n    pauseCameraRecord();\n    pauseScreenRecord();\n  };\n  const resumeCameraRecord = () => {\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.resume();\n    }\n  };\n  const resumeScreenRecord = () => {\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.resume();\n    }\n  };\n  const resumeRecord = () => {\n    setIsRecording(true);\n    resumeCameraRecord();\n    resumeScreenRecord();\n  };\n  const createCrmeraRecorder = (stream) => {\n    const options = {\n      audioBitsPerSecond: cameraAudioBitsPerSecond,\n      videoBitsPerSecond: cameraVideoBitsPerSecond,\n      mimeType: type.webm,\n    };\n    const recorder = new MediaRecorder(stream, options);\n    cameraRecorderRef.current = recorder;\n    recorder.ondataavailable = (event) => {\n      if (cameraChunksRef.current) {\n        cameraChunksRef.current.push(event.data);\n      }\n    };\n    recorder.onstop = () => {\n      const blob = new Blob(cameraChunksRef.current, {\n        type: type.webm,\n      });\n      saveCameraMedia(blob);\n    };\n    recorder.onerror = console.log;\n  };\n  const createScreenRecorder = (stream) => {\n    const options = {\n      audioBitsPerSecond: 12800,\n      videoBitsPerSecond: screenAudioBitsPerSecond,\n      mimeType: type.webm,\n    };\n    const recorder = new MediaRecorder(stream, options);\n    screenRecorderRef.current = recorder;\n    recorder.ondataavailable = (event) => {\n      if (screenChunksRef.current) {\n        screenChunksRef.current.push(event.data);\n      }\n    };\n    recorder.onstop = () => {\n      const blob = new Blob(screenChunksRef.current, {\n        type: type.webm,\n      });\n      saveScreenMedia(blob);\n    };\n    recorder.onerror = console.log;\n  };\n  useEffect(() => {\n    navigator.mediaDevices\n      .enumerateDevices()\n      .then((devices) => devices.filter((d) => d.kind === 'videoinput')[0])\n      .then((video) => navigator.mediaDevices.getUserMedia({ video }))\n      .then(async (stream) => {\n        if (cameraRef.current) {\n          cameraRef.current.srcObject = stream;\n          cameraRef.current.onloadedmetadata = (_e) => {\n            if (cameraRef.current) {\n              cameraRef.current.play();\n            }\n          };\n        }\n        const audioTracks = await navigator.mediaDevices\n          .getUserMedia({ audio: true, video: false })\n          .then((mediaStream) => mediaStream.getAudioTracks()[0]);\n        stream.addTrack(audioTracks);\n        createCrmeraRecorder(stream);\n        return null;\n      })\n      .catch(console.log);\n  }, []);\n  const stopRecord = async () => {\n    setHasStarted(false);\n    setIsRecording(false);\n    if (cameraRecorderRef.current) {\n      cameraRecorderRef.current.stop();\n    }\n    if (screenRecorderRef.current) {\n      screenRecorderRef.current.stop();\n    }\n  };\n  useEffect(() => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true,\n      cursor: 'always',\n    })\n      .then(async (stream) => {\n        if (screenRef.current) {\n          screenRef.current.srcObject = stream;\n          screenRef.current.onloadedmetadata = (_e) => {\n            if (screenRef.current) {\n              screenRef.current.play();\n            }\n          };\n        }\n        createScreenRecorder(stream);\n        return null;\n      })\n      .catch(console.log);\n  }, []);\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <video src=\"\" ref={cameraRef} width=\"100%\" className={classes.camera} autoPlay />\n            {/* <div style={{ margin: 16 }}>\n              audioBitsPerSecond\n              <Input\n                defaultValue={cameraAudioBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={cameraAudioBitsPerSecond}\n                onChange={(e) => setCameraAudioBitsPerSecond(e.target.value)}\n              />\n            </div>\n            <div style={{ margin: 16 }}>\n              videoBitsPerSecond\n              <Input\n                defaultValue={cameraVideoBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={cameraVideoBitsPerSecond}\n                onChange={(e) => setCameraVideoBitsPerSecond(e.target.value)}\n              />\n            </div> */}\n            <div style={{ margin: 16 }}>\n              <Button\n                onClick={() => setShowCamera(!showCamera)}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                {showCamera ? '隐藏摄像头' : '展示摄像头'}\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <video src=\"\" ref={screenRef} width=\"100%\" className={classes.screen} autoPlay />\n            {/* <div style={{ margin: 16 }}>\n              videoBitsPerSecond\n              <Input\n                defaultValue={screenAudioBitsPerSecond}\n                inputProps={{ type: 'number' }}\n                value={screenAudioBitsPerSecond}\n                onChange={(e) => setScreenAudioBitsPerSecond(e.target.value)}\n              />\n            </div> */}\n            <div style={{ margin: 16 }}>\n              <Button\n                onClick={() => setShowScreen(!showScreen)}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                {showScreen ? '隐藏屏幕' : '展示屏幕'}\n              </Button>\n            </div>\n          </Paper>\n\n        </Grid>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <div style={{ margin: 16, display: 'flex', justifyContent: 'center' }}>\n              <div>{isRecording && '录制中'}</div>\n              <div style={{ margin: 16 }}>\n                <Button\n                  onClick={startRecord}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  开始\n                </Button>\n              </div>\n              <div style={{ margin: 16 }}>\n                <Button onClick={stopRecord} variant=\"contained\" color=\"secondary\">\n                  结束\n                </Button>\n              </div>\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/admin/demo/record-client/src/index.js",[],"/Users/admin/demo/record-client/src/reportWebVitals.js",[],{"ruleId":"19","severity":1,"message":"20","line":134,"column":24,"nodeType":"21","messageId":"22","endLine":134,"endColumn":35},{"ruleId":"19","severity":1,"message":"20","line":155,"column":24,"nodeType":"21","messageId":"22","endLine":155,"endColumn":35},{"ruleId":"19","severity":1,"message":"20","line":178,"column":14,"nodeType":"21","messageId":"22","endLine":178,"endColumn":25},{"ruleId":"19","severity":1,"message":"20","line":208,"column":14,"nodeType":"21","messageId":"22","endLine":208,"endColumn":25},"no-console","Unexpected console statement.","MemberExpression","unexpected"]